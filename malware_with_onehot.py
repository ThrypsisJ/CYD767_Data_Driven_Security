import pyarrow.csv as pcsv
import torch.nn as nn
import torch.optim as optim
import pickle
import operator

class sequence(nn.Module):
    def __init__(self, input_dim, hidden_dim):
        super(sequence, self).__init__()
        self.gru = nn.GRU(input_dim, hidden_dim, 1, batch_first=True)
        self.linear = nn.Linear(hidden_dim, 1, bias=True)
        self.sig = nn.Sigmoid()

    def forward(self, input):
        _, out_0 = self.gru(input)
        out_1 = self.linear(out_0)
        out_2 = self.sig(out_1)
        return out_2

class mal_onehot():
    def __init__(self, input_dim, hidden_dim):
        self.seq = sequence().to('cuda')
        self.opt = optim.Adam(self.seq.parameters(), lr=0.01)
        self.word_dict = self.load_dict()

    def load_dict(self):
        f = open('./dataset/word_dict.pkl')
        word_dict = pickle.load(f)
        word_dict = dict(sorted(word_dict), key=operator.itemgetter(1), reverse=True)
        return word_dict

    def train():
        
